"""
üìå Explicaci√≥n del proceso:
1Ô∏è‚É£ Recibe la URL ‚Üí El usuario proporciona la URL del producto de Amazon.
2Ô∏è‚É£ Normaliza la URL ‚Üí Se eliminan par√°metros innecesarios para evitar bloqueos y asegurar una URL limpia.
3Ô∏è‚É£ Comprueba si el producto ya existe en la base de datos ‚Üí Si el producto est√° almacenado, se actualiza. Si no, se crea uno nuevo.
4Ô∏è‚É£ Llama al scraper ‚Üí Ejecuta Playwright o la herramienta de scraping definida para obtener informaci√≥n actualizada del producto
(nombre, precio, imagen).
5Ô∏è‚É£ Actualiza o crea el producto ‚Üí Si el producto ya exist√≠a, se actualizan los datos con la nueva informaci√≥n;
   si es nuevo, se guarda en la DB.
6Ô∏è‚É£ A√±ade registro al historial de precios ‚Üí Guarda la evoluci√≥n del precio en un historial para futuras comparaciones.

üîπ En resumen, este servicio conecta el scraping con la base de datos para mantener los productos actualizados
y con un historial de precios. üöÄ
"""

from urllib.parse import urlparse
from app.scraper.amazon import scraper_amazon
from app.bbdd.database import connetion, Base
from app.api.products.api_products import get_products, post_product
from backend.app.models.price_history import PriceHistory
from backend.app.models.products import Products
from backend.app.schemas.product_schemas import ProductSchema


def normalize_url(url: str) -> str:
    """
    üìå **Normaliza una URL de Amazon**
    ‚úÖ Extrae el identificador √∫nico (ASIN) del producto.
    ‚úÖ Elimina par√°metros innecesarios de la URL.

    üîπ **Par√°metros:**  
    - `url`: La URL completa del producto en Amazon.

    üîπ **Retorno:**  
    - La URL limpia con formato `https://www.amazon.es/dp/{ASIN}`
    - Retorna `"URL no v√°lida"` si la URL no contiene un identificador de producto.

    """
    parsed_url = urlparse(url)
    path_parts = parsed_url.path.split("/")

    if "dp" in path_parts:
        product_id = path_parts[path_parts.index("dp") + 1]
        return f"https://www.amazon.es/dp/{product_id}"

    return "URL no v√°lida"


def scraper():
    """
    üìå **Proceso de scraping y almacenamiento de productos**
    ‚úÖ Obtiene la URL del usuario.
    ‚úÖ Scrapear el producto desde Amazon usando Playwright.
    ‚úÖ Comprueba si el producto ya existe en la BD.
    ‚úÖ Si no existe, lo inserta junto con su historial de precios.

    üîπ **Retorno:**  
    - Mensajes indicando √©xito o errores en el proceso.
    """

    # Nos conectamos a la Base de Datos
    try:
        # Consulta de prueba para validar conexi√≥n
        connetion.execute("SELECT 1")
        print("‚úÖ Conexi√≥n establecida con la Base de datos.")
    except Exception as e:
        print(f"‚ùå Error: No hay conexi√≥n con la base de datos. {e}")
        return

    # Introducir la URL del producto
    url = input("Introduce la URL del producto: ").strip()
    if not url:
        print("‚ùå Error: No se ha introducido una URL v√°lida.")
        return

    # Normalizar la URL
    product_url = normalize_url(url)
    if product_url == "URL no v√°lida":
        print("‚ùå Error: La URL introducida no es v√°lida.")
        return

    # Scraping del producto desde Amazon
    try:
        product_scraper = scraper_amazon(product_url)
        if product_scraper is None:
            raise Exception("El scraping no devolvi√≥ datos v√°lidos.")
    except Exception as e:
        print(f"‚ùå Error al scrapear el producto: {e}")
        return

    # Consultar si el producto ya existe en la Base de Datos
    try:
        db_product = get_products(product_scraper.name)
    except Exception as e:
        print(f"‚ùå Error al consultar la BD: {e}")
        return

    # Si el producto no est√° en la BD, crearlo y a√±adir el historial de precios
    if db_product is None:
        if not all([product_scraper.get("name"), product_scraper.get("price"), product_scraper.get("image")]):
            print("‚ùå Error: Datos del producto incompletos.")
            return

        try:
            product_data = ProductSchema(**product_scraper)
            post_product(product_data)
            print("‚úÖ Producto registrado correctamente en la Base de Datos.")
        except Exception as e:
            print(f"‚ùå Error al insertar el producto en la BD: {e}")
            return


if __name__ == "__main__":
    scraper()
